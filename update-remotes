#!/usr/bin/env python3

"""Fetch, pull, update a list of repositories.

TODO:

    * Using ABCMeta is shit here; why call method if there is no meaningful
      implementation? Use TemplateMethod instead.
"""

import sys
import argparse
import subprocess
import os.path
from abc import (ABCMeta, abstractmethod)
from contextlib import contextmanager
import importlib.machinery


HOME = os.path.expanduser('~')
REPO_FILE = os.path.join(HOME, '.repos.conf')

class colors:
    RED = '\033[91m'
    YELLOW = '\033[93m'
    RESET = '\033[0m'

@contextmanager
def change_directory(target):
    old = os.getcwd()
    os.chdir(target)
    yield target
    os.chdir(old)


class Repository(metaclass=ABCMeta):

    """Base-class for all repo types."""

    def __init__(self, path):
        self.path = os.path.join(HOME, path)
        assert os.path.exists(self.path)

    def fetch_changes(self, args):
        with change_directory(self.path):
            print('Fetching changes for ' + colors.YELLOW +
                    str(self) + colors.RESET + ' ...')
            if args.dry_run:
                return
            self.fetch_impl(args)

    def pull_changes(self, args):
        if args.fetch_only:
            return
        with change_directory(self.path):
            print('Updating working copy ...')
            if args.dry_run:
                return
            self.update_impl(args)

    @abstractmethod
    def fetch_impl(self, args):
        pass

    @abstractmethod
    def update_impl(self, args):
        pass

    def __str__(self):
        return '{}'.format(self.path)


class GitRepo(Repository):

    """Plain git repositories."""

    def fetch_impl(self, args):
        subprocess.call(['git', 'remote', 'update'])

    def update_impl(self, args):
        subprocess.call(['git', 'pull', '--rebase', '--stat', 'origin', 'master'])


class GitSVNRepo(Repository):

    """Repositories managed with git-svn."""

    def fetch_impl(self, args):
        subprocess.call(['git', 'svn', 'fetch'])

    def update_impl(self, args):
        subprocess.call(['git', 'svn', 'rebase'])


class SVNRepo(Repository):

    """Plain Subversion repos."""

    def fetch_impl(self, args):
        pass

    def update_impl(self, args):
        subprocess.call(['svn', 'up'])


def main():
    parser = argparse.ArgumentParser(description=
            'Fetch, pull, and update repositories.')
    parser.add_argument('--dry-run',
                        dest='dry_run',
                        action='store_true',
                        default=False,
                        help='do not do anything at all, useful for testing')
    parser.add_argument('--fetch-only',
                        dest='fetch_only',
                        action='store_true',
                        default=False,
                        help='do not update working copy')
    args = parser.parse_args()

    if not os.path.exists(REPO_FILE):
        print('{} missing. Exiting.'.format(REPO_FILE))
        sys.exit(1)

    # Make sure we don't write __pycache__ directories when importing config
    # module
    sys.dont_write_bytecode = True

    loader = importlib.machinery.SourceFileLoader('module.name', REPO_FILE)
    try:
        config = loader.load_module()
    except Exception as exc:
        print('Could not load repositories from {}. Syntax error?\n{}'
                .format(REPO_FILE, exc))
        sys.exit(2)

    repos = []
    def add_repos(name, cls):
        try:
            paths = getattr(config, name, [])
            for item in paths:
                path = None
                if type(item) is str:
                        path = item
                elif type(item) is list:
                    predicate = item[0]
                    if predicate():
                        path = item[1]
                else:
                    msg = 'Expected str or list, got {}' \
                            .format(type(item).__name__)
                    raise AttributeError(msg)
                if path:
                    repos.append(cls(path))
        except Exception as exc:
            if len(str(exc)) > 0:
                reason = str(exc)
            else:
                reason = type(exc).__name__
            print('Could not load repositories from {}\n{}'
                    .format(REPO_FILE, reason))
            sys.exit(3)

    add_repos('git_repos', GitRepo)
    add_repos('git_svn_repos', GitSVNRepo)
    add_repos('svn_repos', SVNRepo)

    for repo in repos:
        repo.fetch_changes(args)
        repo.pull_changes(args)

if __name__ == '__main__':
    main()
